LRU Cache

typedef struct Node {
    int val;
    int key;
    Node *prev;
    Node *next;
    Node(int k, int v) {
        val = v;
        key = k;
        prev = NULL;
        next = NULL;
    }
} Node;

class LRUCache{
    int cap;
    int count = 0;
    Node *head, *tail;
    unordered_map<int, Node*> map;
public:
    LRUCache(int capacity) {
        cap = capacity;
        head = NULL;
        tail = NULL;
        count = 0;
    }
    
    ~LRUCache() {
        delete map;
        while (head != NULL) {
            tmp = head;
            head = head->next;
            delete head;
        }
    }
    
    int get(int key) {
        unordered_map<int, Node*>::const_iterator it = map.find(key);
        if (it != map.end()) {
            Node *n = it->second;
            if (count > 1 && n->prev != NULL) {
                n->prev->next = n->next;
                if (n->next != NULL)
                    n->next->prev = n->prev;
                else tail = n->prev;
                
                n->prev = NULL;
                n->next = head;
                head = n;
            }
            
            return n->val;
        }
        
        return -1;
    }
    
    void set(int key, int value) {
        Node *n = new Node(key, value);
        n->next = head;
        if (head != NULL) {
            head->prev = n;
        }
    
        head = n;
        if (tail == NULL)
            tail = n;
            
        map[key] = n;
        ++count;
        
        while (count > cap) {
            Node *tmp = tail;
            tail = tail->prev;
            tail->next = NULL;
            map.erase(tmp->key);
            delete tmp;
            --count;
        }
    }
};

Interleaving String

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if (s3.size() == 0) {
            return true;
        }
        
        char c = s3.at(0);
        if ((s1.size() == 0 || s1.at(0) != c) && (s2.size() == 0 || s2.at(0) != c))
            return false;
        if (s1.size() > 0 && s1.at(0) == c && isInterleave(s1.substr(1), s2, s3.substr(1)))
            return true;
        if (s2.size() > 0 && s2.at(0) == c && isInterleave(s1, s2.substr(1), s3.substr(1)))
            return true;
        return false;
    }
};

Surrounded Regions

 Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,

X X X X
X O O X
X X O X
X O X X

After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X

class Solution {
    bool isAtBorder(vector<vector<char>> &board, int row, int col) {
        if ((row == 0 || row == board.size() - 1) && board.size() > 1)
            return true;
        if ((col == 0 || col == board[0].size() - 1) && board[0].size() > 1)
            return true;
        return false;
    }
    
    void convert(vector<vector<char>> &board ,int row, int col, char from, char to) {
        if (isAtBorder(board, row, col))
            return;
            
        if (board[row][col] == from) {
            board[row][col] = to;
            if (row < board.size() - 1)
                convert(board, row + 1, col, from, to);
            if (row > 0)
                convert(board, row - 1, col, from, to);
            if (col < board[0].size() - 1)
                convert(board, row, col + 1, from, to);
            if (col > 0)
                convert(board, row, col - 1, from, to);
        }
    }
    
    void restore(vector<vector<char>> &board ,int row, int col) {
        if (board[row][col] == '1' || (board[row][col] == 'O' && isAtBorder(board, row, col))) {
            board[row][col] = 'O';
            if (row < board.size() - 1)
                restore(board, row + 1, col);
            if (row > 0)
                restore(board, row - 1, col);
            if (col < board[0].size() - 1)
                restore(board, row, col + 1);
            if (col > 0)
                restore(board, row, col - 1);
        }  
    }
    
public:
    void solve(vector<vector<char>> &board) {
        for (int i = 0; i < board.size(); ++i)
            for (int j = 0; j < board[i].size(); ++j)
                convert(board, i, j, 'O', '1');
        for (int i = 0; i < board.size(); ++i)
            for (int j = 0; j < board[i].size(); ++j)
                if (isAtBorder(board, i, j))
                    restore(board, i, j);
        for (int i = 0; i < board.size(); ++i)
            for (int j = 0; j < board[i].size(); ++j)
                convert(board, i, j, '1', 'X');
    }
};
