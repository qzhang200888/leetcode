Convert Sorted Array to Binary Search Tree

Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    TreeNode *sortedArrayToBST(vector<int> &num, int start, int end) {
        if (start > end) return NULL;
        if (start == end) 
            return new TreeNode(num[start]);
        int mid = (start + end) / 2;
        TreeNode *root = new TreeNode(num[mid]);
        if (start < mid) root->left = sortedArrayToBST(num, start, mid - 1);
        root->right = sortedArrayToBST(num, mid + 1, end);
        
        return root;
    }
    
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        int size = num.size();
        if (size == 0) return NULL;
        
        return sortedArrayToBST(num, 0, size - 1);
    }
};

Convert Sorted List to Binary Search Tree

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *sortedListToBST(ListNode *head) {
        if (head == NULL) return NULL;
        if (head->next == NULL) return new TreeNode(head->val);

        ListNode *ptr1 = head->next->next, *ptr2 = head;
        while (ptr1) {
            ptr1 = ptr1->next;
            if (ptr1) {
                ptr1 = ptr1->next;
                ptr2 = ptr2->next;
            }
        }
        
        ListNode *mNode = ptr2->next;
        ptr2->next = NULL;
        TreeNode *root = new TreeNode(mNode->val);
        root->left = sortedListToBST(head);
        root->right = sortedListToBST(mNode->next);
        
        return root;
    }
};

Binary Tree Zigzag Level Order Traversal

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        vector<vector<int> > res;
        if (root == NULL) return res;
        
        stack<TreeNode *> s;
        s.push(root);
        bool leftToRight = true;
        while (!s.empty()) {
            stack<TreeNode *> s2;
            vector<int> v;
            while (!s.empty()) {
                TreeNode *n = s.top();
                s.pop();
                v.push_back(n->val);
                if (leftToRight) {
                    if (n->left) s2.push(n->left);
                    if (n->right) s2.push(n->right);
                } else {
                    if (n->right) s2.push(n->right);
                    if (n->left) s2.push(n->left);
                }
            }
            res.push_back(v);
            s = s2;
            leftToRight = !leftToRight;
        }
        
        return res;     
    }
};

Construct Binary Tree from Inorder and Postorder Traversal

Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree. 

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private TreeNode buildTree(int[] inorder, int[] postorder, int inorderStart, int inorderEnd, int postOrderStart, int postorderEnd) {
        int rootVal = postorder[postorderEnd];
        int i = inorderStart;
        while (i <= inorderEnd && inorder[i] != postorder[postorderEnd]) ++i;
        
        if (i > inorderEnd) return null;
        
        TreeNode root = new TreeNode(postorder[postorderEnd]);
        if (i > inorderStart)
            root.left = buildTree(inorder, postorder, inorderStart, i - 1, postOrderStart, postOrderStart + i - inorderStart - 1);
        if (i < inorderEnd)
            root.right = buildTree(inorder, postorder, i + 1, inorderEnd, postOrderStart + i - inorderStart, postorderEnd - 1);
            
        return root;
    }
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder == null || inorder.length == 0 || inorder.length != postorder.length) return null;
        return buildTree(inorder, postorder, 0, inorder.length - 1, 0, postorder.length - 1);
    }
}


Construct Binary Tree from Preorder and Inorder Traversal

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree. 

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private TreeNode buildTree(int[] preorder, int[] inorder, int prerderStart, int preorderEnd, int inorderStart, int inorderEnd) {
        int rootVal = preorder[prerderStart];
        int i = inorderStart;
        while (i <= inorderEnd && inorder[i] != preorder[prerderStart]) ++i;
        
        if (i > inorderEnd) return null;
        
        TreeNode root = new TreeNode(preorder[prerderStart]);
        if (i > inorderStart)
            root.left = buildTree(preorder, inorder, prerderStart + 1, prerderStart + i - inorderStart, inorderStart, i - 1);
        if (i < inorderEnd)
            root.right = buildTree(preorder, inorder, prerderStart + i - inorderStart + 1, preorderEnd, i + 1, inorderEnd);
            
        return root;
    }
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder == null || preorder.length == 0 || preorder.length != inorder.length) return null;
        return buildTree(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);
    }
}


Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example,
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

public class Solution {
    public int trap(int[] A) {
        if (A == null || A.length == 0) return 0;
        
        int max = -1, maxIndex = -1;
        for (int i = 0; i < A.length; ++i) {
            if (A[i] > max) {
                max = A[i];
                maxIndex = i;
            }
        }
        
        int res = 0, preH = 0;
        for (int i = 0; i <= maxIndex; ++i) {
            if (A[i] < preH)
                res += preH - A[i];
            else preH = A[i];
        }
        
        preH = 0;
        for (int i = A.length - 1; i >= maxIndex; --i) {
            if (A[i] < preH)
                res += preH - A[i];
            else preH = A[i];
        }
        
        return res;
    }
}

Letter Combinations of a Phone Number

Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Note:
Although the above answer is in lexicographical order, your answer could be in any order you want. 

class Solution {
    vector<string> digitToLetter(char c) {
        vector<string> v;
        switch (c) {
            case '2': 
                v.push_back("a");
                v.push_back("b");
                v.push_back("c");
                break;
            case '3': 
                v.push_back("d");
                v.push_back("e");
                v.push_back("f");
                break;
            case '4': 
                v.push_back("g");
                v.push_back("h");
                v.push_back("i");
                break;
            case '5': 
                v.push_back("j");
                v.push_back("k");
                v.push_back("l");
                break;
            case '6': 
                v.push_back("m");
                v.push_back("n");
                v.push_back("o");
                break;
            case '7': 
                v.push_back("p");
                v.push_back("q");
                v.push_back("r");
                v.push_back("s");
                break;
            case '8': 
                v.push_back("t");
                v.push_back("u");
                v.push_back("v");
                break;
            case '9': 
                v.push_back("w");
                v.push_back("x");
                v.push_back("y");
                v.push_back("z");
                break;
        }
        return v;
    }
    
public:
    vector<string> letterCombinations(string digits) {
        vector<string> v;
        if (digits.size() == 0) {
            v.push_back(digits);
            return v;
        }
        
        char c;
        if (digits.size() == 1) {
            c = digits.at(0);
            return digitToLetter(c);
        }
        
        c = digits.at(0);
        vector<string> v1 = digitToLetter(c);
        vector<string> v2 = letterCombinations(digits.substr(1));
        
        for (vector<string>::const_iterator it1 = v1.begin(); it1 != v1.end(); ++it1) {
            for (vector<string>::const_iterator it2 = v2.begin(); it2 != v2.end(); ++it2) {
                v.push_back(*it1 + *it2);
            }
        }
        
        return v;
    }
};

Linked List Cycle II

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (head == NULL || head->next == NULL)
            return NULL;
            
        ListNode *first = head, *second = head;
        while (first != NULL && first->next != NULL) {
            first = first->next;
            second = second->next;
            first = first->next;
            
            if (first == second) {
                break;
            }
        }
        
        if (first != second)
            return NULL;

        second = head;
        while (first != second) {
            first = first->next;
            second = second->next;
        }
        
        return second;
    }
};

Merge Intervals

Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18]. 

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        std::sort(intervals.begin(), intervals.end(), [] (const Interval & a, const Interval & b) {
                return a.start < b.start;
        });
        
        vector<Interval> v;
        Interval *interval = NULL;
        for (int i = 0; i < intervals.size(); ++i) {
            if (interval == NULL) {
                interval = new Interval(intervals[i].start, intervals[i].end);
                continue;
            }
            if (interval->end >= intervals[i].start && interval->end < intervals[i].end) {
                interval->end = intervals[i].end;
            } else if (interval->end >= intervals[i].end) {
                continue;
            } else {
                v.push_back(*interval);
                if (interval->end < intervals[i].end) {
                    delete interval;
                    interval = new Interval(intervals[i].start, intervals[i].end);
                } else {
                    delete interval;
                    interval = NULL;
                }
            }
        }
        
        if (interval != NULL) {
            v.push_back(*interval);
            delete interval;   
        }
        
        return v;
    }
};
